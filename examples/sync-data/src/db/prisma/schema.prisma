// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  country    String?
  state      String?
  city       String?
  postalCode String?  @map("postal_code")
  district   String?
  street     String?
  number     String?
  latitude   String?
  longitude  String?

  merchant_details    merchant_details @relation(name: "merchant_address", fields: [merchant_details_id], references: [id])
  merchant_details_id Int              @unique
}

model merchant_details {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  ifood_id       String    @unique()
  name           String?
  corporateName  String?   @map("corporate_name")
  description    String?
  averageTicket  Decimal?  @map("average_ticket")
  exclusive      Boolean?
  type           String?
  status         String?
  createdAtIfood DateTime? @map("created_at_ifood")
  operations     Json?
  address        address?  @relation(name: "merchant_address")
  merchant       merchant? @relation(name: "merchant_details")
}

model merchant_operation_validation {
  id                    Int                @id @default(autoincrement())
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  ifood_id              String             @unique()
  code                  String
  state                 String
  message               Json?
  merchant_operation    merchant_operation @relation(name: "merchant_operation_validation", fields: [merchant_operation_id], references: [id])
  merchant_operation_id Int
}

model merchant_operation {
  id           Int                             @id @default(autoincrement())
  createdAt    DateTime                        @default(now()) @map("created_at")
  updatedAt    DateTime                        @updatedAt @map("updated_at")
  operation    String
  salesChannel String
  available    Boolean
  state        String
  reopenable   Json?
  message      Json?
  validations  merchant_operation_validation[] @relation(name: "merchant_operation_validation")
  merchant     merchant                        @relation(name: "merchant_operation")
}

model merchant_interruption {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  ifood_id    String    @unique()
  description String?
  start       DateTime
  end         DateTime?
}

model order {
  id                       Int              @id @default(autoincrement())
  createdAt                DateTime         @default(now()) @map("created_at")
  updatedAt                DateTime         @updatedAt @map("updated_at")
  benefits                 benefit[]
  orderType                String
  payments                 payment
  merchant                 merchant
  salesChannel             String
  picking                  picking
  orderTiming              String
  createdAt                String
  total                    total
  preparationStartDateTime String
  id                       String
  displayId                String
  items                    item[]
  customer                 customer
  extraInfo                String
  additionalFees           additional_fee[]
  delivery                 delivery
  schedule                 schedule
  indoor                   indoor
  takeout                  takeout
}

model takeout {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  mode            String
  takeoutDateTime DateTime
}

model indoor {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  mode             String
  deliveryDateTime DateTime
  table            String
}

model schedule {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  deliveryDateTimeStart DateTime
  deliveryDateTimeEnd   DateTime
}

model delivery {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  mode             String
  deliveredBy      String
  deliveryAddress  delivery_address
  deliveryDateTime String
}

model delivery_address {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  reference        String
  country          String
  streetName       String
  formattedAddress String
  streetNumber     String
  city             String
  postalCode       String
  coordinates      coordinates
  neighborhood     String
  state            String
  complement       String
}

model coordinates {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  latitude  Int
  longitude Int
}

model additional_fee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  type      String
  value     Decimal
}

model customer {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  phone                 phone
  documentNumber        String
  name                  String
  ordersCountOnMerchant Decimal
  ifood_id              String
}

model phone {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  number              String
  localizer           String
  localizerExpiration String
}

model item {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  unitPrice    Decimal
  quantity     Decimal
  externalCode String
  totalPrice   Decimal
  index        Decimal
  unit         String
  ean          String
  price        Decimal
  scalePrices  scale_prices
  observations String
  imageUrl     String
  name         String
  options      option[]
  ifood_id     String
  optionsPrice Decimal
}

model Option {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  unitPrice    Decimal
  unit         String
  ean          String
  quantity     Decimal
  externalCode String
  price        Decimal
  name         String
  index        Decimal
  ifood_id     String
  addition     Decimal
}

model scale_prices {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  defaultPrice Decimal
  scales       scale[]
}

model scale {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  minQuantity Decimal
  price       Decimal
}

model total {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  benefits       Decimal
  deliveryFee    Decimal
  orderAmount    Decimal
  subTotal       Decimal
  additionalFees Decimal
}

model picking {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  picker             String
  replacementOptions String
}

model payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  methods   method[]
  pending   Decimal?
  prepaid   Decimal?
}

model method {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  prepaid   Boolean
  currency  String?
  type      String?
  method    String?
  value     String?
  wallet    wallet
  cash      cash
  card      card
}

model card {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  brand     String
}

model cash {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  changeFor Decimal  @map("change_for")
}

model wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
}

model benefit {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  targetId          String?             @map("target_id")
  sponsorshipValues sponsorship_value[] @map("sponsorship_values") @relation("benefit_sponsorship_value")
  value             Decimal?
  target            String?
}

model sponsorship_value {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  benefit   benefit  @relation("benefit_sponsorship_value", fields: [benefitId], references: [id])

  benefitId Int      @map("benefit_it")
  name      String
  value     Decimal?
}

model merchant {
  id               Int                     @id @default(autoincrement())
  createdAt        DateTime                @default(now()) @map("created_at")
  updatedAt        DateTime                @updatedAt @map("updated_at")
  ifood_id         String                  @unique()
  name             String
  corporateName    String                  @map("corporate_name")
  merchant_details merchant_details        @relation(name: "merchant_details", fields: [merchant_details_id], references: [id])
  operations       merchant_operation[]    @relation(name: "merchant_operation")
  interruptions    merchant_interruption[]
  orders           Order[]
  sales Sales[]

  merchant_details_id Int
}
